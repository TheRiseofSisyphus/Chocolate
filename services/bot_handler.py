import logging
from aiogram import Bot, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from config import BOT_TOKEN, OPERATOR_PERCENT
from services.file_manager import FileManager
from services.excel_processor import ExcelProcessor
from services.report_generator import ReportGenerator
from services.session_manager import SessionManager
from pathlib import Path

logger = logging.getLogger(__name__)


class Form(StatesGroup):
    waiting_for_percent = State()
    waiting_for_file = State()
    ready_to_finish = State()


class BotHandler:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.session_manager = None
        self.current_agent_percent = None

        # –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        self.main_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìÇ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª Excel")],
                [KeyboardButton(text="‚èπ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É")]
            ],
            resize_keyboard=True
        )

    async def handle_start(self, message: types.Message, state: FSMContext):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
        await state.clear()
        self.session_manager = SessionManager(message.from_user.id)
        self.current_agent_percent = None
        await message.answer(
            "‚úÖ –°–µ—Å—Å–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–∞—á–∞—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=self.main_keyboard
        )

    async def handle_file_request(self, message: types.Message, state: FSMContext):
        """–ó–∞–ø—Ä–æ—Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∞–≥–µ–Ω—Ç–∞"""
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3 –¥–ª—è 3%):",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(Form.waiting_for_percent)

    async def handle_agent_percent(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞"""
        try:
            percent = float(message.text)
            if not 0 < percent <= 100:
                raise ValueError

            self.current_agent_percent = percent
            await message.answer(
                f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ü–µ–Ω—Ç –∞–≥–µ–Ω—Ç–∞: {percent}%\n"
                "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."
            )
            await state.set_state(Form.waiting_for_file)

        except (ValueError, TypeError):
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç (–æ—Ç 0.1 –¥–æ 100)")

    async def handle_file(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        if not message.document:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª.", reply_markup=self.main_keyboard)
            return

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
            if not message.document.file_name.lower().endswith('.xlsx'):
                raise ValueError("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã .xlsx")

            # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
            file = await self.bot.get_file(message.document.file_id)
            file_data = await self.bot.download_file(file.file_path)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            file_path = FileManager.save_user_file(message.from_user.id, file_data)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
            sheets_data = ExcelProcessor.process_workbook(file_path, self.current_agent_percent)

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞
            combined_report = ReportGenerator.generate_combined_report(sheets_data)
            await self._send_report(message, combined_report)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç—á—ë—Ç–æ–≤
            for sheet_name, sheet_data in sheets_data.items():
                self.session_manager.add_agent(
                    agent_name=sheet_data.full_name,
                    turnover=sheet_data.turnover,
                    agent_percent=self.current_agent_percent
                )
                FileManager.save_report(
                    message.from_user.id,
                    sheet_name,
                    ReportGenerator._generate_single_sheet(sheet_data)
                )

            await message.answer("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", reply_markup=self.main_keyboard)
            await state.set_state(Form.ready_to_finish)

        except ValueError as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=self.main_keyboard)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}", exc_info=True)
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.",
                reply_markup=self.main_keyboard
            )

    async def handle_finish_work(self, message: types.Message, state: FSMContext):
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        try:
            if not self.session_manager:
                await message.answer("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
                return

            summary = self.session_manager.get_summary()

            report = (
                "üìä *–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞*\n"
                f"‚Ä¢ –ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏: {summary['start_time']}\n"
                f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: {summary['agents_count']}\n"
                f"‚Ä¢ –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: {ReportGenerator.format_number(summary['total_turnover'])} ‚ÇΩ\n"
                f"‚Ä¢ –í–∞—à–∞ –≤—ã–ø–ª–∞—Ç–∞ ({OPERATOR_PERCENT}%): {ReportGenerator.format_number(summary['operator_payment'])} ‚ÇΩ"
            )

            await message.answer(report, parse_mode="Markdown")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}", exc_info=True)
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞")
        finally:
            await state.clear()
            self.session_manager = None
            await message.answer(
                "–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–ª—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start",
                reply_markup=ReplyKeyboardRemove()
            )

    async def _send_report(self, message: types.Message, text: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –±–æ–ª—å—à–∏—Ö –æ—Ç—á–µ—Ç–æ–≤ –ø–æ —á–∞—Å—Ç—è–º"""
        try:
            if len(text) <= 4096:
                await message.answer(text)
            else:
                # –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ç—á–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤
                parts = [text[i:i + 4000] for i in range(0, len(text), 4000)]
                for part in parts:
                    await message.answer(part)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞")