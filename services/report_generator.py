from .data_models import ExcelSheetData


class ReportGenerator:
    @staticmethod
    def format_number(value: float) -> str:
        try:
            return "{:,.2f}".format(float(value)).replace(",", " ").replace(".00", "")
        except (ValueError, TypeError):
            return str(value)

    @staticmethod
    def generate(data: ExcelSheetData) -> str:
        report = [
            f"=== –û—Ç—á–µ—Ç –ø–æ –ª–∏—Å—Ç—É: {data.sheet_name} ===",
            f"–§–ò–û: {data.full_name}",
            f"–ë–∞–Ω–∫: {data.bank}",
            f"–ü–æ–∫—É–ø–∫–∏, –ø—Ä–æ–≥—Ä–µ–≤—ã: {data.warm_up_rub}/{data.warm_up_purchases}",
            f"–°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {ReportGenerator.format_number(data.start_balance)}",
            f"–°—Ç–∞—Ä—Ç: {data.start_time}",
            f"–°—Ç–æ–ø: {data.end_time}",
            f"\n–ü—Ä–æ—Ü–µ–Ω—Ç –∞–≥–µ–Ω—Ç–∞: {data.agent_percent}%",
            "\nüìå –í—Ö–æ–¥–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:"
        ]

        report.extend(
            f"{i}. {ReportGenerator.format_number(t.amount)} {t.transaction_id}"
            for i, t in enumerate(data.inflows, 1)
        )

        report.append("\n\nüìå –í—ã—Ö–æ–¥–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:")
        report.extend(
            f"{i}. {ReportGenerator.format_number(t.amount)} {t.transaction_id}"
            f"{f' ({t.commission} –∫–æ–º—Å–∞)' if t.commission else ''}"
            for i, t in enumerate(data.outflows, 1)
        )

        if data.baibit:
            report.append("\n\nüìå –í—ã—Ö–æ–¥ –ë–∞–π–±–∏—Ç:")
            report.extend(
                f"{i}. {ReportGenerator.format_number(t.amount)} ({t.rate})"
                for i, t in enumerate(data.baibit, 1)
            )

        report.extend([
            f"\n\n–ò—Ç–æ–≥–∏:",
            f"–û–±–æ—Ä–æ—Ç: {ReportGenerator.format_number(data.turnover)}",
            f"–û–ø–ª–∞—Ç–∞ –∞–≥–µ–Ω—Ç–∞ ({data.agent_percent}%): {ReportGenerator.format_number(data.agent_payment)}",
            f"–û–ø–ª–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (0.5%): {ReportGenerator.format_number(data.operator_payment)}",
            f"–û–±—â–∏–µ –∫–æ–º–∏—Å—Å–∏–∏: {ReportGenerator.format_number(sum(t.commission for t in data.outflows))}",
            f"–°—Ç–æ–ø –±–∞–ª–∞–Ω—Å: {ReportGenerator.format_number(data.stop_balance)}",
            f"–¢–≥: {data.operator or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}",
            "=" * 40
        ])

        return "\n".join(report)
