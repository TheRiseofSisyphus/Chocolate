import logging
from aiogram import Bot, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from config import MAX_FILE_SIZE, OPERATOR_PERCENT
from services.file_manager import FileManager
from services.excel_processor import ExcelProcessor
from services.report_generator import ReportGenerator
from services.session_manager import SessionManager


from pathlib import Path

logger = logging.getLogger(__name__)


class Form(StatesGroup):
    waiting_for_percent = State()
    waiting_for_file = State()
    ready_to_finish = State()


class BotHandler:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.current_agent_percent = None
        self.total_operator_payment = 0
        self.session_manager = None

        # –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        self.main_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìÇ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª Excel")],
                [KeyboardButton(text="‚èπ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É")]
            ],
            resize_keyboard=True
        )

    async def handle_start(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º session_manager –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        if not hasattr(self, 'session_manager'):
            self.session_manager = SessionManager(message.from_user.id)

        await state.clear()
        self._reset_work_data()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=self.main_keyboard)

    async def handle_file_request(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∞–π–ª–∞"""
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3 –¥–ª—è 3%):",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(Form.waiting_for_percent)

    async def handle_agent_percent(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∞–≥–µ–Ω—Ç–∞"""
        try:
            percent = float(message.text)
            if not 0 < percent <= 100:
                raise ValueError

            self.current_agent_percent = percent
            await message.answer(
                f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ü–µ–Ω—Ç –∞–≥–µ–Ω—Ç–∞: {percent}%\n"
                "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."
            )
            await state.set_state(Form.waiting_for_file)

        except (ValueError, TypeError):
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3.5 –¥–ª—è 3.5%)")

    async def handle_file(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è Excel-—Ñ–∞–π–ª–∞"""
        if not message.document:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª.", reply_markup=self.main_keyboard)
            return

        if message.document.mime_type != "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx", reply_markup=self.main_keyboard)
            return

        if message.document.file_size > MAX_FILE_SIZE:
            await message.answer(
                f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_FILE_SIZE // 1024 // 1024}MB",
                reply_markup=self.main_keyboard
            )
            return

        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            file = await self.bot.get_file(message.document.file_id)
            file_data = await self.bot.download_file(file.file_path)
            file_path = FileManager.save_user_file(message.from_user.id, file_data)

            # –ü–∞—Ä—Å–∏–Ω–≥ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            sheets_data = ExcelProcessor.process_workbook(file_path, self.current_agent_percent)

            full_report = ""
            file_operator_total = 0
            file_turnover_total = 0

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
            for sheet_name, sheet_data in sheets_data.items():
                sheet_data.sheet_name = sheet_name
                report_text = ReportGenerator.generate(sheet_data)
                FileManager.save_report(message.from_user.id, sheet_name, report_text)
                full_report += f"\n\n{report_text}"

                # –°—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–ª–∞—Ç
                file_operator_total += sheet_data.operator_payment
                file_turnover_total += sheet_data.turnover

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–π —Å—É–º–º—ã
            self.total_operator_payment += file_operator_total

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ –ø–æ —Ñ–∞–π–ª—É
            file_summary = (
                    "\n\n=== –ò–¢–û–ì–ò –ü–û –§–ê–ô–õ–£ ==="
                    f"\n–û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: {ReportGenerator.format_number(file_turnover_total)}"
                    f"\n–û–ø–ª–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (0.5%): {ReportGenerator.format_number(file_operator_total)}"
                    "\n" + "=" * 40
            )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞
            await self._send_report(
                message,
                full_report.strip() + file_summary,
                reply_markup=self.main_keyboard
            )

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
            self.current_agent_percent = None
            await state.set_state(Form.ready_to_finish)

        except Exception as e:
            logger.error(f"Error processing file: {e}", exc_info=True)
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=self.main_keyboard
            )

    async def handle_finish_work(self, message: types.Message, state: FSMContext):
        """–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞"""
        try:
            if not hasattr(self, 'session_manager'):
                await message.answer("‚ÑπÔ∏è –°–µ—Å—Å–∏—è –Ω–µ –±—ã–ª–∞ –Ω–∞—á–∞—Ç–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
                return

            summary = self.session_manager.get_summary()

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç —á–∞—Å—Ç—è–º–∏ –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏
            report_parts = [
                "üìä *–ò—Ç–æ–≥–∏ —Å–µ—Å—Å–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞*",
                f"‚Ä¢ –ù–∞—á–∞–ª–æ: {summary['start_time']}",
                f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: {summary['agents_count']}",
                f"‚Ä¢ –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: {ReportGenerator.format_number(summary['total_turnover'])} ‚ÇΩ",
                f"‚Ä¢ –í–∞—à–∞ –≤—ã–ø–ª–∞—Ç–∞ ({OPERATOR_PERCENT}%): {ReportGenerator.format_number(summary['operator_payment'])} ‚ÇΩ",
                "\nüîù –¢–æ–ø –∞–≥–µ–Ω—Ç–æ–≤:"
            ]



        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞: {str(e)}", exc_info=True)
            await message.answer(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞. –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏.")
        finally:
            if hasattr(self, 'session_manager'):
                del self.session_manager
            await state.clear()

    def _reset_work_data(self):
        """–°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—á–µ–π —Å–µ—Å—Å–∏–∏"""
        self.current_agent_percent = None
        self.total_operator_payment = 0



    async def _send_report(self, message: types.Message, text: str, reply_markup=None):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤"""
        try:
            if len(text) <= 4096:
                await message.answer(text, reply_markup=reply_markup)
            else:
                parts = [text[i:i + 4096] for i in range(0, len(text), 4096)]
                for part in parts[:-1]:
                    await message.answer(part)
                await message.answer(parts[-1], reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"Error sending report: {e}")
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞.",
                reply_markup=reply_markup
            )