from .data_models import ExcelSheetData
import logging
from typing import Dict, List

logger = logging.getLogger(__name__)


class ReportGenerator:
    @staticmethod
    def format_number(value: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á"""
        try:
            if value is None:
                return "0"
            return "{:,.2f}".format(float(value)).replace(",", " ").replace(".00", "")
        except (ValueError, TypeError) as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–ª–∞ {value}: {e}")
            return str(value or "0")

    @staticmethod
    def _generate_single_sheet(data: ExcelSheetData) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á—ë—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ –ª–∏—Å—Ç–∞"""
        try:
            report = [
                f"\n\n=== –õ–∏—Å—Ç: {data.sheet_name or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'} ===",
                f"–§–ò–û: {data.full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}",
                f"–ë–∞–Ω–∫: {data.bank or '–ù–µ —É–∫–∞–∑–∞–Ω'}",
                f"–û–±–æ—Ä–æ—Ç: {ReportGenerator.format_number(data.turnover)} ‚ÇΩ",
                f"–í—ã–ø–ª–∞—Ç–∞ –∞–≥–µ–Ω—Ç—É: {ReportGenerator.format_number(data.agent_payment)} ‚ÇΩ"
            ]

            if data.inflows:
                report.append("\n–í—Ö–æ–¥—è—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:")
                report.extend(
                    f"{i}. {ReportGenerator.format_number(t.amount)} ‚ÇΩ (ID: {t.transaction_id or '–Ω–µ—Ç'})"
                    for i, t in enumerate(data.inflows, 1)
                )

            return "\n".join(report)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞ –¥–ª—è –ª–∏—Å—Ç–∞ {data.sheet_name}: {e}")
            return f"\n\n‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞ –¥–ª—è –ª–∏—Å—Ç–∞ {data.sheet_name}"

    @staticmethod
    def generate_combined_report(sheets_data: Dict[str, ExcelSheetData]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –≤—Å–µ–º –ª–∏—Å—Ç–∞–º"""
        try:
            if not sheets_data:
                return "‚ÑπÔ∏è –§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–∞"

            report = ["üìä –û–ë–™–ï–î–ò–ù–Å–ù–ù–´–ô –û–¢–ß–Å–¢"]
            total_turnover = 0
            total_agent_payment = 0

            for sheet_name, data in sheets_data.items():
                sheet_report = ReportGenerator._generate_single_sheet(data)
                report.append(sheet_report)
                total_turnover += data.turnover or 0
                total_agent_payment += data.agent_payment or 0

            report.append(
                "\n\nüìå –ò–¢–û–ì–û –ü–û –§–ê–ô–õ–£:\n"
                f"‚Ä¢ –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: {ReportGenerator.format_number(total_turnover)} ‚ÇΩ\n"
                f"‚Ä¢ –°—É–º–º–∞—Ä–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞ –∞–≥–µ–Ω—Ç–∞–º: {ReportGenerator.format_number(total_agent_payment)} ‚ÇΩ\n"
                f"‚Ä¢ –í—ã–ø–ª–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É (0.5%): {ReportGenerator.format_number(total_turnover * 0.005)} ‚ÇΩ"
            )

            return "\n".join(report)
        except Exception as e:
            logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}", exc_info=True)
            return "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞"